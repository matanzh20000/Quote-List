{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuotesId.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","onAddedCommentHandler","useCallback","length","onClick","QuoteDetail","getSingleQuote","loadedQuotes","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/3.d9171487.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__36hQ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1ndQL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__ajq7I\",\"loading\":\"NewCommentForm_loading__2_iUg\",\"control\":\"NewCommentForm_control__tImcZ\",\"actions\":\"NewCommentForm_actions__17603\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2AFne\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__33CSI\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData: { text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport { useCallback } from \"react\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n\n  const onAddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === \"completed\" &&\n    (loadedComments || loadedComments.length > 0)\n  ) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    (status === \"completed\") &\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={onAddedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return <div className='centered'><LoadingSpinner/></div>;\r\n  }\r\n\r\n  if (error) {\r\n    <div className=\"centered\">{error}</div>\r\n  }\r\n\r\n  if(!loadedQuotes.text){\r\n    <div>No Quote Found!</div>\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}