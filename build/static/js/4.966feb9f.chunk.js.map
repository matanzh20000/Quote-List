{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","console","log","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,2FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAK,SAAEH,EAAMI,UAC9C,E,yBCsEeC,EAjEG,SAACL,GACjB,MAAoCM,oBAAS,GAAM,mBAA5CC,EAAU,KAAEC,EAAa,KAE1BC,EAAiBC,mBACjBC,EAAeD,mBAsBrB,OACE,eAAC,WAAQ,WACP,cAAC,IAAM,CACLE,KAAML,EACNM,QAAS,SAACC,GAAQ,MAChB,wDAAwD,IAG5D,cAAC,EAAI,UACH,uBACEC,QAnBiB,WACvBC,QAAQC,IAAI,UACZT,GAAc,EAChB,EAiBQP,UAAWC,IAAQgB,KACnBC,SAhCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCxB,EAAM0B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GAClD,EAuBoC,UAE3BzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAQ,SAC9B,cAACC,EAAA,EAAc,MAInB,sBAAK9B,UAAWC,IAAQ8B,QAAQ,UAC9B,uBAAOC,QAAQ,SAAQ,oBACvB,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKR,UAAWC,IAAQ8B,QAAQ,UAC9B,uBAAOC,QAAQ,OAAM,kBACrB,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAQoC,QAAQ,SAC9B,wBAAQC,QAjCY,WAC5B/B,GAAc,EAChB,EA+BkDP,UAAU,MAAK,gCAQnE,E,gBCjDeuC,UAjBE,WACf,IAAMC,EAAUC,cAChB,EAAgCC,YAAQC,KAAhCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAErBC,qBAAU,WACO,cAAXD,GACFL,EAAQO,KAAK,UAEjB,GAAG,CAACP,EAASK,IAMb,OAAO,cAAC,EAAS,CAACjB,UAAsB,YAAXiB,EAAsBpB,WAJ3B,SAACuB,GACvBJ,EAAYI,EACd,GAGF,C","file":"static/js/4.966feb9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3Y2JY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2Puru\",\"loading\":\"QuoteForm_loading__3oBPg\",\"control\":\"QuoteForm_control__1zhxH\",\"actions\":\"QuoteForm_actions__2ZmIH\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useState } from \"react\";\r\nimport { useRef } from \"react\";\r\n\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./QuoteForm.module.css\";\r\nimport { Prompt } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst QuoteForm = (props) => {\r\n  const [isEntering, setIsEntering] = useState(false);\r\n\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n\r\n    // optional: Could validate here\r\n\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  const formFocusHandler = () => {\r\n    console.log(\"focus!\");\r\n    setIsEntering(true);\r\n  };\r\n\r\n  const finishEnteringHandler = () => {\r\n    setIsEntering(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={isEntering}\r\n        message={(location) =>\r\n          \"Are You Sure You Want To Leave? All Data Will Be Lost!\"\r\n        }\r\n      />\r\n      <Card>\r\n        <form\r\n          onFocus={formFocusHandler}\r\n          className={classes.form}\r\n          onSubmit={submitFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={finishEnteringHandler} className=\"btn\">\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nconst NewQuote = () => {\r\n  const history = useHistory();\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n  }, [history, status]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}